.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Plugin::Form 3"
.TH Dancer2::Plugin::Form 3 "2015-04-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Plugin::Form \- Dancer2 form handler for Template::Flute template engine
.SH "VERSION"
.IX Header "VERSION"
Version 0.0001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Display template with checkout form:
.PP
.Vb 2
\&    get \*(Aq/checkout\*(Aq => sub {
\&        my $form;
\&
\&        $form = form(\*(Aqcheckout\*(Aq);
\&        
\&        template \*(Aqcheckout\*(Aq, {form => $form};
\&    };
.Ve
.PP
Retrieve form input from checkout form:
.PP
.Vb 2
\&    post \*(Aq/checkout\*(Aq => sub {
\&        my ($form, $values);
\&
\&        $form = form(\*(Aqcheckout\*(Aq);
\&        $values = $form\->values();
\&    };
.Ve
.PP
Reset form after completion to prevent old data from
showing up on new form:
.PP
.Vb 2
\&    $form = form(\*(Aqcheckout\*(Aq);
\&    $form\->reset;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Dancer2::Plugin::Form\*(C'\fR is used for forms with the Dancer2::Template::TemplateFlute
templating engine.
.PP
Form fields, values and errors are stored into and loaded from the session key \f(CW\*(C`form\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates \f(CW\*(C`Dancer2::Plugin::Form\*(C'\fR object.
.SS "name"
.IX Subsection "name"
Get form name:
.PP
.Vb 1
\&    $form\->name
.Ve
.SS "action"
.IX Subsection "action"
Set form action:
.PP
.Vb 1
\&   $form\->action(\*(Aq/checkout\*(Aq);
.Ve
.PP
Get form action:
.PP
.Vb 1
\&   $action = $form\->action;
.Ve
.SS "fill"
.IX Subsection "fill"
Fill form values:
.PP
.Vb 1
\&    $form\->fill({username => \*(Aqracke\*(Aq, email => \*(Aqracke@linuxia.de\*(Aq});
.Ve
.SS "values"
.IX Subsection "values"
Get form values as hash reference:
.PP
.Vb 1
\&    $values = $form\->values;
.Ve
.PP
Set form values from a hash reference:
.PP
.Vb 1
\&    $values => $form\->values(ref => \e%input);
.Ve
.SS "valid"
.IX Subsection "valid"
Determine whether form values are valid:
.PP
.Vb 1
\&    $form\->valid();
.Ve
.PP
Return values are 1 (valid), 0 (invalid) or
undef (unknown).
.PP
Set form status to \*(L"valid\*(R":
.PP
.Vb 1
\&    $form\->valid(1);
.Ve
.PP
Set form status to \*(L"invalid\*(R":
.PP
.Vb 1
\&    $form\->valid(0);
.Ve
.PP
The form status automatically changes to
\&\*(L"invalid\*(R" when errors method is called with
error messages.
.SS "errors"
.IX Subsection "errors"
Set form errors:
.PP
.Vb 2
\&   $form\->errors({username => \*(AqMinimum 8 characters\*(Aq,
\&                  email => \*(AqInvalid email address\*(Aq});
.Ve
.PP
Get form errors as hash reference:
.PP
.Vb 1
\&   $errors = $form\->errors;
.Ve
.SS "errors_hashed"
.IX Subsection "errors_hashed"
Returns form errors as array reference filled with a hash reference
for each error.
.SS "failure"
.IX Subsection "failure"
Indicates form failure by passing form errors.
.PP
.Vb 2
\&    $form\->failure(errors => {username => \*(AqMinimum 8 characters\*(Aq,
\&                              email => \*(AqInvalid email address\*(Aq});
.Ve
.PP
You can also set a route for redirection:
.PP
.Vb 2
\&    return $form\->failure(errors => {username => \*(AqMinimum 8 characters\*(Aq},
\&        route => \*(Aq/account\*(Aq);
.Ve
.PP
Passing parameters for the redirection \s-1URL\s0 is also possible:
.PP
.Vb 3
\&    return $form\->failure(errors => {username => \*(AqMinimum 8 characters\*(Aq},
\&        route => \*(Aq/account\*(Aq,
\&        params => {layout => \*(Aqmobile\*(Aq});
.Ve
.PP
Please ensure that you validate input submitted by an user before
adding them to the \f(CW\*(C`params\*(C'\fR hash.
.SS "fields"
.IX Subsection "fields"
Set form fields:
.PP
.Vb 1
\&    $form\->fields([qw/username email password verify/]);
.Ve
.PP
Get form fields:
.PP
.Vb 1
\&    $fields = $form\->fields;
.Ve
.SS "pristine"
.IX Subsection "pristine"
Determines whether a form is pristine or not.
.PP
This can be used to fill the form with default
values and suppress display of errors.
.PP
A form is pristine until it receives form
field input from the request or out of the
session.
.SS "reset"
.IX Subsection "reset"
Reset form information (fields, errors, values, valid) and
updates session accordingly.
.SS "from_session"
.IX Subsection "from_session"
Loads form data from session key 'form'.
Returns 1 if session contains data for this form, 0 otherwise.
.SS "to_session"
.IX Subsection "to_session"
Saves form name, form fields, form values and form errors into 
session key 'form'.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stefan Hornburg (Racke), \f(CW\*(C`<racke at linuxia.de>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-Dancer2\-template\-templateflute at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dancer2\-Template\-TemplateFlute>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Dancer2::Plugin::Form
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dancer2\-Template\-TemplateFlute>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Dancer2\-Template\-TemplateFlute>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Dancer2\-Template\-TemplateFlute>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Dancer2\-Template\-TemplateFlute/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2011\-2015 Stefan Hornburg (Racke).
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
